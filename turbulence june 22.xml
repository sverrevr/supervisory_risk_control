<?xml version='1.0' encoding='UTF-8'?>
<root>
 <tabbed_widget name="Main Window" parent="main_window">
  <Tab tab_name="tab1" containers="1">
   <Container>
    <DockSplitter sizes="0.5;0.5" orientation="-" count="2">
     <DockSplitter sizes="0.5;0.5" orientation="|" count="2">
      <DockArea name="...">
       <plot style="Lines" flip_y="false" mode="TimeSeries" flip_x="false">
        <range bottom="874.950000" top="1927.050000" left="0.063594" right="268.104847"/>
        <limitY/>
        <curve name="actuator_outputs.00/output.00" color="#d62728"/>
        <curve name="actuator_outputs.00/output.01" color="#1ac938"/>
        <curve name="actuator_outputs.00/output.02" color="#ff7f0e"/>
        <curve name="actuator_outputs.00/output.03" color="#f14cc1"/>
       </plot>
      </DockArea>
      <DockArea name="...">
       <plot style="Lines" flip_y="false" mode="TimeSeries" flip_x="false">
        <range bottom="-1.050000" top="1.050000" left="0.063594" right="268.104847"/>
        <limitY/>
        <curve name="manual_control_setpoint/x" color="#17becf"/>
        <curve name="manual_control_setpoint/y" color="#bcbd22"/>
        <curve name="manual_control_setpoint/z" color="#1f77b4"/>
       </plot>
      </DockArea>
     </DockSplitter>
     <DockSplitter sizes="0.5;0.5" orientation="|" count="2">
      <DockArea name="...">
       <plot style="Lines" flip_y="false" mode="TimeSeries" flip_x="false">
        <range bottom="-2.302359" top="1.814224" left="0.063594" right="268.104847"/>
        <limitY/>
        <curve name="vehicle_local_position/z" color="#9467bd"/>
       </plot>
      </DockArea>
      <DockArea name="...">
       <plot style="Lines" flip_y="false" mode="XYPlot" flip_x="false">
        <range bottom="-1.942791" top="0.338080" left="-1.320564" right="3.522621"/>
        <limitY/>
        <curve curve_x="vehicle_local_position/x" name="vehicle_local_position/[x;y]" curve_y="vehicle_local_position/y" color="#1f77b4"/>
       </plot>
      </DockArea>
     </DockSplitter>
    </DockSplitter>
   </Container>
  </Tab>
  <Tab tab_name="tab2" containers="1">
   <Container>
    <DockSplitter sizes="0.5;0.5" orientation="-" count="2">
     <DockArea name="...">
      <plot style="Lines" flip_y="false" mode="TimeSeries" flip_x="false">
       <range bottom="-0.000184" top="0.007524" left="0.063594" right="268.104847"/>
       <limitY/>
       <curve name="rp_error" color="#1ac938">
        <transform name="Moving Average" alias="rp_error[Moving Average]">
         <options value="300" compensate_offset="false"/>
        </transform>
       </curve>
       <curve name="manual_control_setpoint/z" color="#1f77b4"/>
       <curve name="vehicle_local_position/z" color="#9467bd"/>
       <curve name="rp_error_lowpass" color="#ff7f0e"/>
       <curve name="actuator_outputs.00/output.00" color="#d62728"/>
       <curve name="actuator_outputs.00/output.01" color="#1ac938"/>
       <curve name="actuator_outputs.00/output.02" color="#ff7f0e"/>
       <curve name="actuator_outputs.00/output.03" color="#f14cc1"/>
      </plot>
     </DockArea>
     <DockSplitter sizes="0.5;0.5" orientation="|" count="2">
      <DockArea name="...">
       <plot style="Lines" flip_y="false" mode="TimeSeries" flip_x="false">
        <range bottom="0.000000" top="1.000000" left="0.000000" right="1.000000"/>
        <limitY/>
       </plot>
      </DockArea>
      <DockArea name="...">
       <plot style="Lines" flip_y="false" mode="XYPlot" flip_x="false">
        <range bottom="-1.942791" top="0.338080" left="-1.320564" right="3.522621"/>
        <limitY/>
        <curve curve_x="vehicle_local_position/x" name="vehicle_local_position/[x;y]" curve_y="vehicle_local_position/y" color="#d62728"/>
       </plot>
      </DockArea>
     </DockSplitter>
    </DockSplitter>
   </Container>
  </Tab>
  <currentTabIndex index="1"/>
 </tabbed_widget>
 <use_relative_time_offset enabled="1"/>
 <!-- - - - - - - - - - - - - - - -->
 <!-- - - - - - - - - - - - - - - -->
 <Plugins>
  <plugin ID="DataLoad CSV">
   <default delimiter="0" time_axis=""/>
  </plugin>
  <plugin ID="DataLoad ULog"/>
  <plugin ID="UDP Server"/>
  <plugin ID="WebSocket Server"/>
  <plugin ID="Fast Fourier Transform"/>
  <plugin ID="Quaternion to RPY"/>
  <plugin ID="Reactive Script Editor">
   <library code="--[[ Helper function to create a ScatterXY series from arrays.&#xa;&#xa; series_name: name of the created ScatterXY series&#xa; prefix:      prefix of the timeseries, before the index of the array&#xa; suffix_X:   suffix to complete the name of the series containing the X value.&#xa;             if [nil], the index of the array will be used.&#xa; suffix_Y:   suffix to complete the name of the series containing the Y value&#xa; timestamp:   usually the tracker_time variable&#xa;              &#xa; Example:&#xa; &#xa; Assuming we have multiple series in the form:&#xa; &#xa;   /trajectory/node.{X}/position/x&#xa;   /trajectory/node.{X}/position/y&#xa;   &#xa; where {N} is the index of the array (integer). We can create a reactive series from the array with:&#xa; &#xa;   CreateSeriesFromArray( &quot;my_trajectory&quot;, &quot;/trajectory/node&quot;,  &quot;position/x&quot;, &quot;position/y&quot;, tracker_time );&#xa;]]--&#xa;&#xa;function CreateSeriesFromArray( series_name, prefix, suffix_X, suffix_Y, timestamp )&#xa;  --- create a new series or overwite the previous one&#xa;  new_series = MutableScatterXY.new(series_name)&#xa;  &#xa;  --- Append points to new_series&#xa;  index = 0&#xa;  while(true) do&#xa;&#xa;    x = index;&#xa;    -- if not nil, get the X coordinate from a series&#xa;    if suffix_X ~= nil then &#xa;      series_x = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_X) )&#xa;      if series_x == nil then break end&#xa;      x = series_x:atTime(timestamp)&#x9; &#xa;    end&#xa;    &#xa;    series_y = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_Y) )&#xa;    if series_x == nil then break end &#xa;    y = series_y:atTime(timestamp)&#xa;    &#xa;    new_series:push_back(x,y)&#xa;    index = index+1&#xa;  end&#xa;end&#xa;"/>
   <scripts/>
  </plugin>
  <plugin ID="CSV Exporter"/>
 </Plugins>
 <!-- - - - - - - - - - - - - - - -->
 <previouslyLoaded_Datafiles>
  <fileInfo filename="../../../../../scout_logs/2022-06-13 standard drone/10_51_46 - turbulence 2.ulg" prefix="">
   <selected_datasources value=""/>
   <plugin ID="DataLoad ULog"/>
  </fileInfo>
 </previouslyLoaded_Datafiles>
 <!-- - - - - - - - - - - - - - - -->
 <customMathEquations>
  <snippet name="pitch">
   <global></global>
   <function>w = value
x = v1
y = v2
z = v3

dcm20 = 2 * (w * y - z * x)

return math.asin(dcm20)</function>
   <linked_source>vehicle_attitude/q.00</linked_source>
   <additional_sources>
    <v1>vehicle_attitude/q.01</v1>
    <v2>vehicle_attitude/q.02</v2>
    <v3>vehicle_attitude/q.03</v3>
   </additional_sources>
  </snippet>
  <snippet name="roll">
   <global></global>
   <function>w = value
x = v1
y = v2
z = v3

dcm21 = 2 * (w * x + y * z)
dcm22 = 1-2*(x*x+y*y)

roll = math.atan(dcm21, dcm22)

return roll</function>
   <linked_source>vehicle_attitude/q.00</linked_source>
   <additional_sources>
    <v1>vehicle_attitude/q.01</v1>
    <v2>vehicle_attitude/q.02</v2>
    <v3>vehicle_attitude/q.03</v3>
   </additional_sources>
  </snippet>
  <snippet name="roll_error">
   <global>window = {}
time_window = {}
time_horizon = 0.5</global>
   <function>table.insert(time_window,time)
table.insert(window,v1)

while(time_window[#time_window] - time_window[1] > time_horizon) do
	table.remove(time_window,1)
	table.remove(window,1)	
end

window_max = -10000
window_min = 10000
for key, elem in ipairs(window) do
	window_max = math.max(window_max, elem)
	window_min = math.min(window_min, elem)
end

if(value &lt; window_max and value > window_min) then
	return 0
elseif(value &lt; window_min) then
	return math.abs(window_min-value)
else
	return math.abs(window_max-value)
end

return 0</function>
   <linked_source>roll</linked_source>
   <additional_sources>
    <v1>vehicle_attitude_setpoint/roll_body</v1>
   </additional_sources>
  </snippet>
  <snippet name="rp_error_lowpass">
   <global>x = 0
is_first = false
K=1
T=100
dt=0.1</global>
   <function>if(is_first) then
	x = K*value
end

y = x
x = (1-(dt/T))*x+K*(dt/T)*value
return y</function>
   <linked_source>rp_error</linked_source>
  </snippet>
  <snippet name="pitch_erorr">
   <global>window = {}
time_window = {}
time_horizon = 0.5</global>
   <function>table.insert(time_window,time)
table.insert(window,v1)

while(time_window[#time_window] - time_window[1] > time_horizon) do
	table.remove(time_window,1)
	table.remove(window,1)	
end

window_max = -10000
window_min = 10000
for key, elem in ipairs(window) do
	window_max = math.max(window_max, elem)
	window_min = math.min(window_min, elem)
end

if(value &lt; window_max and value > window_min) then
	return 0
elseif(value &lt; window_min) then
	return math.abs(window_min-value)
else
	return math.abs(window_max-value)
end

return 0</function>
   <linked_source>pitch</linked_source>
   <additional_sources>
    <v1>vehicle_attitude_setpoint/pitch_body</v1>
   </additional_sources>
  </snippet>
  <snippet name="rp_error">
   <global></global>
   <function>if(time&lt;390 or time >635) then
	return 0
else
	return math.sqrt(value*value+v1*v1)
end</function>
   <linked_source>roll_error</linked_source>
   <additional_sources>
    <v1>pitch_erorr</v1>
   </additional_sources>
  </snippet>
 </customMathEquations>
 <snippets/>
 <!-- - - - - - - - - - - - - - - -->
</root>

